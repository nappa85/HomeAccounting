/*
 * File: app/view/RowContainer.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('HomeAccounting.view.RowContainer', {
	extend: 'Ext.form.FieldContainer',
	alias: 'widget.rowcontainer',

	requires: [
		'HomeAccounting.view.RowContainerViewModel',
		'Ext.form.field.ComboBox',
		'Ext.form.field.Number',
		'Ext.button.Button'
	],

	viewModel: {
		type: 'rowcontainer'
	},
	defaultListenerScope: true,

	layout: {
		type: 'hbox',
		align: 'stretch'
	},
	items: [
		{
			xtype: 'combobox',
			flex: 2,
			name: 'item',
			allowBlank: false,
			allowOnlyWhitespace: false,
			displayField: 'name',
			queryMode: 'local',
			store: 'Items',
			typeAhead: true,
			valueField: 'name',
			listeners: {
				change: 'onComboboxChange'
			}
		},
		{
			xtype: 'combobox',
			flex: 2,
			name: 'tag',
			displayField: 'name',
			queryMode: 'local',
			store: 'Tags',
			typeAhead: true,
			valueField: 'name',
			listeners: {
				change: 'onComboboxChange1'
			}
		},
		{
			xtype: 'numberfield',
			flex: 1,
			name: 'number',
			value: 1,
			allowBlank: false,
			allowOnlyWhitespace: false,
			allowExponential: false,
			listeners: {
				change: 'onNumberfieldChange'
			}
		},
		{
			xtype: 'numberfield',
			flex: 1,
			name: 'price',
			allowBlank: false,
			allowOnlyWhitespace: false,
			allowExponential: false,
			listeners: {
				change: 'onNumberfieldChange1'
			}
		},
		{
			xtype: 'button',
			handler: function(button, e) {
				button.up('rowcontainer').destroy();
			},
			text: 'Remove'
		}
	],

	onComboboxChange: function(field, newValue, oldValue, eOpts) {
		this.fireEvent('change');
	},

	onComboboxChange1: function(field, newValue, oldValue, eOpts) {
		this.fireEvent('change');
	},

	onNumberfieldChange: function(field, newValue, oldValue, eOpts) {
		this.fireEvent('change');
	},

	onNumberfieldChange1: function(field, newValue, oldValue, eOpts) {
		this.fireEvent('change');
	},

	loadRecord: function(record) {
		this.down('field[name=item]').setValue(record.item);
		this.down('field[name=tag]').setValue(record.tag);
		this.down('field[name=number]').setValue(record.number);
		this.down('field[name=price]').setValue(record.price);
	},

	getValues: function() {
		return {
		    item: this.down('field[name=item]').getValue(),
		    tag: this.down('field[name=tag]').getValue(),
		    number: this.down('field[name=number]').getValue(),
		    price: this.down('field[name=price]').getValue()
		};
	}

});